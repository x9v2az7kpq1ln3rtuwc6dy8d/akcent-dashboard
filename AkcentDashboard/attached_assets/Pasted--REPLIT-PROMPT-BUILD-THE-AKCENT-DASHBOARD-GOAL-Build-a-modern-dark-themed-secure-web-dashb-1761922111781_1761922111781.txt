🧠 REPLIT PROMPT — BUILD THE “AKCENT DASHBOARD”

GOAL: Build a modern, dark-themed, secure web dashboard called Akcent Dashboard, where users can register only with private invite codes generated by admins.
Admins control invite codes, user management, and file downloads.
Users can log in, access a personalized dashboard, and download the Akcent Loader securely.

🎯 FEATURES OVERVIEW

🔐 AUTH SYSTEM

Invite-only registration: Username, Password, Invite Code.

Only valid (unused/unexpired) codes can register users.

Login: Username, Password.

Passwords hashed with bcrypt or argon2.

Session-based or JWT-based authentication.

🧑‍💼 ADMIN PANEL

Admins can:

Generate invite codes (single-use or multi-use).

View all codes (used, active, expired).

Revoke codes instantly.

Manage users (activate/deactivate, reset password).

Everything is logged in an Audit Log (action, user, timestamp, IP).

👤 USER DASHBOARD

Welcome banner with username.

“Download Akcent Loader” button (only works for logged-in users).

Display of registration date, account status, last login.

Responsive dark UI with animated transitions.

💾 DOWNLOAD PROTECTION

/download route requires authentication.

Loader file securely served from backend (no direct public link).

Admins can upload/update the loader file from dashboard.

⚙️ TECH STACK (use these automatically)

Backend: Node.js + Express
Frontend: React + Tailwind CSS (dark mode enforced)
Database: SQLite (simple) or PostgreSQL (recommended)
Auth: Express-session or JWT
Password Hashing: bcrypt
Deployment: Replit Web Server (single container setup)
UI Libraries: shadcn/ui + Framer Motion for animations + Lucide-react icons

🧱 DATABASE SCHEMA

users

Field	Type	Notes
id	uuid	primary key
username	string	unique
password_hash	string	bcrypt
role	string	"user" or "admin"
active	boolean	default true
created_at	datetime	default now
last_login_at	datetime	nullable

invite_codes

Field	Type	Notes
id	uuid	primary key
code	string	unique
created_by	uuid	admin reference
uses_total	int	default 1
uses_remaining	int	decrement on use
expires_at	datetime	nullable
revoked	boolean	default false
created_at	datetime	default now

audit_logs

Field	Type	Notes
id	uuid	primary key
user_id	uuid	nullable
action	string	e.g. "login", "register", "generate_code"
details	json	additional context
ip	string	request IP
created_at	datetime	default now
🖥️ FRONTEND PAGES (dark theme)

Login Page

Fields: Username, Password.

“Don’t have an account? Register with an invite.”

Smooth neon-blue gradient background, glass-card login box.

Register Page

Fields: Username, Password, Invite Code.

Subtle shake animation on invalid code.

Purple accent highlight for active fields.

User Dashboard

Header: “Welcome, {username} 👋”

Card with account info and “Download Akcent Loader” button.

Button triggers /api/download → authenticates and starts secure file download.

Animated loader icon during fetch.

Admin Panel

Tabs: [Invite Codes] [Users] [Audit Log]

Invite Codes: Generate new codes (set uses, expiry). List and revoke codes.

Users: Table of accounts with toggle-active buttons.

Audit Log: Table of recent actions.

All with sleek dark-gray cards and glowing accent borders.

🪄 SECURITY REQUIREMENTS

All passwords hashed with bcrypt.

No plaintext codes or credentials in DB.

HTTPS enforced in production.

Secure cookies or JWTs with expiration + refresh tokens.

Invite codes generated using crypto-random (e.g. crypto.randomBytes(16)).

CSRF protection if session-based.

Rate limit login/registration to avoid brute-force.

🧰 API ENDPOINTS

POST /api/register → Register new user using invite code
POST /api/login → Authenticate user
GET /api/me → Get user info
GET /api/download → Authenticated loader download
POST /api/admin/invite → Generate invite code (admin only)
GET /api/admin/invite → List codes
POST /api/admin/invite/revoke/:id → Revoke code
GET /api/admin/users → List users
PATCH /api/admin/users/:id/toggle → Activate/deactivate user
GET /api/admin/logs → View audit logs

🧑‍💻 DEFAULT ADMIN (for testing)
Username: Akcent.559
Password: Akcent


On first login, require password reset for security.

🎨 DESIGN STYLE (dark theme)

Background: radial gradient (from #0b0c10 → #1f2833)

Text: #c5c6c7

Buttons: neon blue #66fcf1 hover to teal #45a29e

Cards: #1f2833 with subtle inner glow

Fonts: Inter / Poppins

Animations: Framer Motion fade-in and hover scaling

Navbar: fixed top, blurred backdrop with glowing underline when active

Responsive for mobile and desktop

🧩 BONUS TOUCHES

Toast notifications for success/error.

Copy-to-clipboard button for generated codes.

Small “Admin Console” watermark at bottom.

Session timeout auto logout.

Animated logo on landing (Akcent pulse effect).

✅ FINAL REQUIREMENTS

Build everything in Replit as a full-stack web app.
When you run npm run dev, it should:

Start both backend (Express API) and frontend (React app).

Include a .replit file and replit.nix for environment setup.

Automatically create database and seed the default admin.

Serve frontend at / and backend routes at /api/*.

Deliver:

Fully functional site in dark theme.

Working invite-only auth.

Admin code management.

Secure loader download.

Replit-ready — just press “Run”.